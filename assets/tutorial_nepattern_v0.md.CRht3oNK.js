import{_ as i,o as a,c as n,aa as t}from"./chunks/framework.DCts17Kx.js";const o=JSON.parse('{"title":"NEPattern","description":"","frontmatter":{"prev":"Alconna 2.0","next":"NEPattern 1.0"},"headers":[],"relativePath":"tutorial/nepattern/v0.md","filePath":"tutorial/nepattern/v0.md","lastUpdated":1751135511000}'),e={name:"tutorial/nepattern/v0.md"};function l(h,s,p,k,r,d){return a(),n("div",null,s[0]||(s[0]=[t(`<h1 id="nepattern" tabindex="-1">NEPattern <a class="header-anchor" href="#nepattern" aria-label="Permalink to &quot;NEPattern&quot;">​</a></h1><p><a href="https://github.com/ArcletProject/NEPattern" target="_blank" rel="noreferrer"><code>NEPattern</code></a> 是 <code>Arclet Project</code> 下的负责类型转换、类型验证的模块.</p><p><code>NEPattern</code> 旨在提供一种简单的方式, 使得开发者可以在不了解正则表达式的情况下, 也能够轻松地进行类型转换与类型验证.</p><ul><li>通过传入的 <code>converter</code> 和 <code>validator</code> 等实现了高效的类型转化与类型验证功能</li><li>提供了多种预置的实例, 例如常见的 <code>INT</code> <code>FLOAT</code> <code>BOOL</code> 等</li><li>提供了良好的 <code>typing</code> 支持, 使得开发者可以传入大多数 <code>typing</code> 模块中的类型:</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> type_parser</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> typing </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> type_parser</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(List[</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">]).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li></li><li><code>NEPattern</code> 引入了 <code>Patterns</code> 与 <code>create_local_patterns</code> 等函数, 使得开发者可以自由的控制当前环境下的 <code>Pattern</code> 实例</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 13.0</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;"> &gt;&gt;</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-aUQ0T" id="tab-_kvZTSu" checked><label data-title="pdm" for="tab-_kvZTSu">pdm</label><input type="radio" name="group-aUQ0T" id="tab-yws4zTJ"><label data-title="poetry" for="tab-yws4zTJ">poetry</label><input type="radio" name="group-aUQ0T" id="tab-TxJLni1"><label data-title="pip" for="tab-TxJLni1">pip</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pdm</span><span style="--shiki-light:#2B5581;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;"> &quot;nepattern&lt;1.0&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#2B5581;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;"> &quot;nepattern&lt;1.0&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#2B5581;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#2B5581;--shiki-dark:#D19A66;"> --upgrade</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;"> &quot;nepattern&lt;1.0&quot;</span></span></code></pre></div></div></div><h2 id="构造" tabindex="-1">构造 <a class="header-anchor" href="#构造" aria-label="Permalink to &quot;构造&quot;">​</a></h2><p>一般而言，我们通过 <code>nepattern.BasePattern</code> 来构造一个 <code>NEPattern</code> 实例。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">TYPE_CONVERT</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">origin</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">accept</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">convert</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(x))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;42&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以发现，我们通过 <code>BasePattern</code> 的 <code>mode</code> 参数来指定匹配模式。事实上，这里有五种匹配模式：</p><ul><li><code>KEEP</code>：保持原样，不进行任何转换</li><li><code>REGEX_MATCH</code>：使用正则表达式进行匹配</li><li><code>REGEX_CONVERT</code>：使用正则表达式匹配并进行转换</li><li><code>TYPE_CONVERT</code>：传入值直接进行转换</li><li><code>VALUE_OPERATE</code>：传入值进行操作</li></ul><p>对于每种模型，<code>BasePattern</code> 的构造参数会有所不同：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ZVlkN" id="tab-vnKGWu6" checked><label data-title="KEEP" for="tab-vnKGWu6">KEEP</label><input type="radio" name="group-ZVlkN" id="tab-lDge3YH"><label data-title="REGEX_MATCH" for="tab-lDge3YH">REGEX_MATCH</label><input type="radio" name="group-ZVlkN" id="tab-6NsMHE9"><label data-title="REGEX_MATCH" for="tab-6NsMHE9">REGEX_MATCH</label><input type="radio" name="group-ZVlkN" id="tab-dSlHE8Y"><label data-title="TYPE_CONVERT" for="tab-dSlHE8Y">TYPE_CONVERT</label><input type="radio" name="group-ZVlkN" id="tab-ISTcAth"><label data-title="VALUE_OPERATE" for="tab-ISTcAth">VALUE_OPERATE</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    origin,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 目标类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    alias,   </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 别名</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    accepts,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 接受的类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    addition_accepts,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 以其他 BasePattern 作为接受类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    previous,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 类型不匹配时的前置处理</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    validators,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    pattern,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 正则表达式</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    alias,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 别名</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    previous,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 类型不匹配时的前置处理</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    validators,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    pattern,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 正则表达式</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    origin,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 目标类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    alias,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 别名</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    converter,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 转换方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    previous,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 类型不匹配时的前置处理</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    validators,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    origin,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 目标类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    alias,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 别名</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    converter,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 转换方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    accepts,   </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 接受的类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    addition_accepts,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 以其他 BasePattern 作为接受类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    previous,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 类型不匹配时的前置处理</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    validators,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    origin,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 目标类型</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    alias,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 别名</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    converter,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 转换方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    previous,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 类型不匹配时的前置处理</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">    validators,  </span><span style="--shiki-light:#C2C3C5;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证方法</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div></div><h3 id="on-和-of-方法" tabindex="-1"><code>on</code> 和 <code>of</code> 方法 <a class="header-anchor" href="#on-和-of-方法" aria-label="Permalink to &quot;\`on\` 和 \`of\` 方法&quot;">​</a></h3><p><code>BasePattern.of</code> 可以快捷创建一个只允许指定类的实例通过的 pattern</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而 <code>BasePattern.on</code> 可以快捷创建一个只允许指定对象通过的 pattern</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">124</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="converter" tabindex="-1"><code>converter</code> <a class="header-anchor" href="#converter" aria-label="Permalink to &quot;\`converter\`&quot;">​</a></h3><p>具体而言，<code>converter</code> 参数需要一个函数，其接受两个参数，分别为 <code>BasePattern</code> 实例自身和传入的值，并返回合法的值。该值在不同的模式下有不同的含义：</p><ul><li><code>REGEX_CONVERT</code> 模式下，传入值将是 <code>re.Match</code> 对象，<code>converter</code> 函数需要返回类型转换后的值</li><li><code>TYPE_CONVERT</code> 模式下，传入值将是原始值，<code>converter</code> 函数需要返回类型转换后的值</li><li><code>VALUE_OPERATE</code> 模式下，传入值将是原始值，<code>converter</code> 函数需要返回修改后的值</li></ul><h3 id="previous" tabindex="-1"><code>previous</code> <a class="header-anchor" href="#previous" aria-label="Permalink to &quot;\`previous\`&quot;">​</a></h3><p>具体而言，<code>previous</code> 需要另一个匹配模式仅为 <code>TYPE_CONVERT</code> 或 <code>VALUE_OPERATE</code> 的 <code>BasePattern</code> 实例，将原来的值传入该实例进行处理，用返回值替换原来的输入值。</p><p>例如，若我们希望在 <code>REGEX_MATCH</code> 模式下，当传入值不是字符串时，将其转换为字符串再进行匹配，我们可以这样写：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">    &quot;\\d+&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">REGEX_MATCH</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    previous</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">TYPE_CONVERT</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">origin</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">convert</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(x))</span></span>
<span class="line"><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="validators" tabindex="-1"><code>validators</code> <a class="header-anchor" href="#validators" aria-label="Permalink to &quot;\`validators\`&quot;">​</a></h3><p><code>validators</code> 参数接受一个函数列表，每个函数接受一个参数，即传入的值，返回一个布尔值，表示是否通过验证。</p><h2 id="匹配模式" tabindex="-1">匹配模式 <a class="header-anchor" href="#匹配模式" aria-label="Permalink to &quot;匹配模式&quot;">​</a></h2><h3 id="keep" tabindex="-1"><code>KEEP</code> <a class="header-anchor" href="#keep" aria-label="Permalink to &quot;\`KEEP\`&quot;">​</a></h3><p><code>KEEP</code> 模式下，<code>BasePattern</code> 不会对传入的值进行任何转换，只会进行类型验证</p><ul><li>若没有指定 <code>accepts</code> 或 <code>addition_accepts</code>，则该模式下任意类型都可以通过（即不进行任何操作）</li><li>若指定了 <code>accepts</code> 或 <code>addition_accepts</code>，则只有指定的类型可以通过</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">KEEP</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">accept</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;42&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="regex-match" tabindex="-1"><code>REGEX_MATCH</code> <a class="header-anchor" href="#regex-match" aria-label="Permalink to &quot;\`REGEX_MATCH\`&quot;">​</a></h3><p><code>REGEX_MATCH</code> 模式下，<code>BasePattern</code> 只接受符合正则表达式的字符串，返回的结果也为字符串</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">REGEX_MATCH</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pattern</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#1976D2;--shiki-dark:#E06C75;">\\d</span><span style="--shiki-light:#D32F2F;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;42&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在该模式下，即使正则表达式内声明了捕获组，BasePattern 的返回值也只会是整个字符串。</p><h3 id="regex-convert" tabindex="-1"><code>REGEX_CONVERT</code> <a class="header-anchor" href="#regex-convert" aria-label="Permalink to &quot;\`REGEX_CONVERT\`&quot;">​</a></h3><p><code>REGEX_CONVERT</code> 模式下，<code>BasePattern</code> 需要使用正则表达式验证传入的字符串，并通过 <code>converter</code> 方法进行转换</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">REGEX_CONVERT</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pattern</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#1976D2;--shiki-dark:#E06C75;">\\d</span><span style="--shiki-light:#D32F2F;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">origin</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">convert</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(x[</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">]))</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;42&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">result</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 42</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>由于涉及到类型转换，因此 <strong>当输入类型不是字符串，但符合 <code>origin</code> 时，将直接作为结果返回</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">result</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 42</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">]).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="type-convert" tabindex="-1"><code>TYPE_CONVERT</code> <a class="header-anchor" href="#type-convert" aria-label="Permalink to &quot;\`TYPE_CONVERT\`&quot;">​</a></h3><p><code>TYPE_CONVERT</code> 模式下，<code>BasePattern</code> 直接对传入的值进行转换</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">TYPE_CONVERT</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">origin</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">accept</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">convert</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(x))</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">&quot;42&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意的是，该情况下 <strong><code>converter</code> 返回 <code>None</code> 时，也将会视为转换失败。</strong></p><h3 id="value-operate" tabindex="-1"><code>VALUE_OPERATE</code> <a class="header-anchor" href="#value-operate" aria-label="Permalink to &quot;\`VALUE_OPERATE\`&quot;">​</a></h3><p><code>VALUE_OPERATE</code> 模式下，<code>BasePattern</code> 对传入的值进行操作</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">pat </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">VALUE_OPERATE</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">origin</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">convert</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">: x </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> pat</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validate</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">result</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#1976D2;--shiki-dark:#D19A66;"> 43</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="继承-basepattern" tabindex="-1">继承 <code>BasePattern</code> <a class="header-anchor" href="#继承-basepattern" aria-label="Permalink to &quot;继承 \`BasePattern\`&quot;">​</a></h2><p>当一般的 <code>BasePattern</code> 无法满足需求时，我们可以继承 <code>BasePattern</code> 类，实现自定义的 <code>match</code> 方法。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes min-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> nepattern </span><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> BasePattern</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchMode</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchFailed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MyPattern</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">BasePattern</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;"> int</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">        super</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#56B6C2;">__init__</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">MatchMode.</span><span style="--shiki-light:#212121;--shiki-dark:#D19A66;">TYPE_CONVERT</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#212121;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">origin</span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#1976D2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">value </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> match</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#FF9800;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> value </span><span style="--shiki-light:#D32F2F;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#24292EFF;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;">value</span><span style="--shiki-light:#212121;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> value</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#C678DD;">        raise</span><span style="--shiki-light:#24292EFF;--shiki-dark:#ABB2BF;"> MatchFailed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>继承 <code>BasePattern</code> 时，虽然 <code>MatchMode</code> 附带的约束将失效，但我们仍然建议遵循各模式的范式。</p><h2 id="内建表达式" tabindex="-1">内建表达式 <a class="header-anchor" href="#内建表达式" aria-label="Permalink to &quot;内建表达式&quot;">​</a></h2><p><code>NEPattern</code> 提供了一些预置的 <code>BasePattern</code> 实例，方便开发者使用：</p><ul><li>基础类型: <code>INTEGER</code>, <code>FLOAT</code>, <code>BOOLEAN</code>, <code>STRING</code>, <code>DICT</code>, <code>LIST</code>, <code>TUPLE</code>, <code>SET</code>, <code>BYTES</code><ul><li><code>NUMBER</code>: <code>INT</code> 与 <code>FLOAT</code> 的组合，若传入值为整数则返回整数，否则返回浮点数</li><li><code>WILD_BOOLEAN</code>: <code>BOOL</code> 的扩展，接受 <code>0</code> <code>1</code> <code>yes</code> <code>no</code> 等值，并允许拓展</li><li><code>DelimiterInt</code>: 能够接受以 <code>,</code> 分隔的整数列表</li><li><code>AnyString</code>: 接受任意对象并转换为字符串</li></ul></li><li>字符串为基础的类型: <code>IP</code>, <code>URL</code>, <code>EMAIL</code>, <code>HEX</code>, <code>HEX_COLOR</code></li><li>特殊类型: <code>DATETIME</code>, <code>PATH</code>, <code>PathFile</code>, <code>ANY</code>, <code>NONE</code></li></ul><h2 id="内建-basepattern-子类" tabindex="-1">内建 <code>BasePattern</code> 子类 <a class="header-anchor" href="#内建-basepattern-子类" aria-label="Permalink to &quot;内建 \`BasePattern\` 子类&quot;">​</a></h2><p>同样的，<code>NEPattern</code> 也提供了一些预置的 <code>BasePattern</code> 子类，方便开发者使用：</p><ul><li><code>DirectPattern</code>: <code>KEEP</code> 模式的特殊 <code>BasePattern</code> 子类，相比于 <code>KEEP</code> 模式，<code>DirectPattern</code> 进行的操作更少。</li><li><code>RegexPattern</code>: <code>REGEX_MATCH</code> 模式的特殊 <code>BasePattern</code> 子类，其返回值为 <code>re.Match</code> 类型。</li><li><code>UnionPattern</code>: 允许组合多个 <code>BasePattern</code> 实例，只要有一个 <code>BasePattern</code> 实例通过验证即可。</li><li><code>SwitchPattern</code>: 依据构造时传入的字典，判断传入值是否是字典中的键并返回对应的值。</li><li><code>AntiPattern</code>: 用来包装一个 <code>BasePattern</code> 实例，以实现相反的匹配效果。</li><li><code>CustomMatchPattern</code>: 快捷地 &quot;继承&quot; 一个 <code>BasePattern</code> 实例，实现自定义的 <code>match</code> 方法。</li></ul>`,61)]))}const c=i(e,[["render",l]]);export{o as __pageData,c as default};
